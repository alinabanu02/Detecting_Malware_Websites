# -*- coding: utf-8 -*-
"""MalwareWEB

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TSIthYkw6j4uJ1Rr8Vt2m_To_PZ9ifNO
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
df = pd.read_csv('dataset.csv')
# Display the first few rows to understand the structure
print(df.head())

# Handle missing values
df.fillna(0, inplace=True)  # Replace NaN with 0, adjust as per your dataset's missing value strategy

# Encode categorical variables
encoder = LabelEncoder()
df['CHARSET'] = encoder.fit_transform(df['CHARSET'].astype(str))  # Example, encode categorical columns

# Split data into features (X) and target variable (y)
X = df.drop(['Type', 'URL', 'WHOIS_COUNTRY', 'WHOIS_STATEPRO', 'WHOIS_REGDATE', 'WHOIS_UPDATED_DATE', 'SERVER'], axis=1)  # Adjust columns as per your dataset
y = df['Type']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize a RandomForestClassifier (you can choose other algorithms as well)
clf = RandomForestClassifier(random_state=42)

# Train the model
clf.fit(X_train, y_train)

# Predict on the test set
y_pred = clf.predict(X_test)

# Evaluate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')

# Display classification report and confusion matrix
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

import joblib

# Save the model to disk
joblib.dump(clf, 'malware_detector_model.pkl')

# Load the model for future use
# clf = joblib.load('malware_detector_model.pkl')

# Example usage: Load the model and make predictions
# Load the model
loaded_model = joblib.load('malware_detector_model.pkl')

# Example prediction
# Assuming X_new is a new set of data to predict on
X_new = X_test.iloc[0:2]  # Example: Use first two rows of test data for prediction
predictions = loaded_model.predict(X_new)
print("Predictions:", predictions)

